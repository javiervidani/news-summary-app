[project]
name = "news-summary-app"
version = "1.0.0"
description = "A modular news aggregation and summarization system"
authors = [
    {name = "News Summary Team", email = "team@example.com"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["news", "summarization", "ai", "rss", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: News/Diary",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Communications",
]

dependencies = [
    "requests>=2.31.0",
    "feedparser>=6.0.10",
    "beautifulsoup4>=4.12.0",
    "schedule>=1.2.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "colorlog>=6.7.0",
    "psycopg2-binary>=2.9.10",
]

[project.optional-dependencies]
# Database support
database = [
    "psycopg2-binary>=2.9.0",
    "pgvector>=0.2.0",
    "sentence-transformers>=2.2.0",
]

# AI processors
openai = [
    "openai>=1.0.0",
]

# Email support  
email = [
    "secure-smtplib>=0.1.1",
]

# Development tools
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# All optional dependencies
all = [
    "news-summary-app[database,openai,email,dev]",
]

[project.scripts]
news-summary = "main:main"

[project.urls]
Homepage = "https://github.com/yourusername/news-summary-app"
Repository = "https://github.com/yourusername/news-summary-app"
Documentation = "https://github.com/yourusername/news-summary-app#readme"
"Bug Tracker" = "https://github.com/yourusername/news-summary-app/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["providers", "processors", "interfaces", "core"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
source = ["providers", "processors", "interfaces", "core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
